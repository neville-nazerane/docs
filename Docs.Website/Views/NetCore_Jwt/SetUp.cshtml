
<p>
    This library provides an easy way to access and control JWT authentication. It allows you to have a single configuration
    for your tokens in your startup, and generate tokens via dependency injection in your code.
</p>

<p>
    This service can be added as an authentication using the <code>AddNetCoreJwt()</code> function:
</p>

<csharp>
    services.AddAuthentication().AddNetCoreJwt();
</csharp>

<p>
    This adds an authentication for JWT authentication with preset values such as an autogenerated secret. This
    authentication is created under a scheme name that can be accessed from the constant <code>NetCoreJwtDefaults.SchemeName</code>.
    To set this authentication as default use the following:
</p>

<csharp>
    services.AddAuthentication(NetCoreJwtDefaults.SchemeName).AddNetCoreJwt();
</csharp>

<p>
    Additional configuration can be added by adding the required options:
</p>

<csharp>
services.AddAuthentication(NetCoreJwtDefaults.SchemeName).AddNetCoreJwt(o => {
    o.Audience = "";
    o.Issuer = "";
    o.Secret = "customSecret";
});
</csharp>