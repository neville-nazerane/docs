
<h2>More about model handler</h2>

<p>
    A model handler manages all mappings between a set of UI components and
    a specific type. The <code>ModelHandler</code> class takes the current model class to be handled as a generic type.
    Creating a new <code>ModelHander</code> for let's say, a class named "Employee" would be as follows:
</p>

<pre><code class="c#">var mapper = new ModelHandler&lt;Employee>();</code></pre>

<p>
    Here, mapper is a model handler that for employees. It can be configured to map/bind each
    property of <code>Employee</code> class with a component (like an input field). 
    Once this model handler is created, each property of the model can be bound to UI components.
</p>

<p>
    Once mapped, this model handler object can be used to get or assign an object of employee. 
    A value for a model can be set as follows: 
</p>

<pre><code class="c#">var employee = new Employee{ Id = 4, FirstName = "John", LastName = "doe"}
    mapper.SetModel(employee);
</code></pre>

<p>
    With this code, the model handler looks for UI components mapped to each property and
    assigns the corresponding values. Any properties not mapped with any UI, is still stored
    in the model handler. For instance, if the <code>FirstName</code> and <code>LastName</code>
    properties are mapped with UI components, but not the <code>Id</code>, the model handler
    would display the first and last names in the UI while the <code>Id</code> would still be 
    stored within the model handler. Similar to setting, the current model can also be 
    fetched from a model handler using the following code:
</p>

<pre><code class="c#">bool success = mapper.TryGetModel(out Employee updated);</code></pre>

<p>
    Here the <code>TryGetModel</code> function attempts to get a value from the UI components.
    If any validations fail (validations explained in the next section) and this function would
    return false. However,the <code>updated</code> variable would still contain all values
    that could be fetched from the UI. In addition to this, the model handler would also
    return any previously added values that are not mapped with the UI. For instance, considering
    the previous example, the first and last names would be attempted to be fetched from the UI
    while the <code>updated</code> will still contain the <code>Id</code> value that was present
    in <code>employee</code> (14). This functionality of fetching the previously <code>Id</code>
    can help in scenarios such as a hidden text field replacement.
</p>