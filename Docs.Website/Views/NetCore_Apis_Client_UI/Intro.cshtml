
<p>
    <i>NetCore.Apis.Client.UI</i> extends the functionalities of <i>NetCore.Apis.Consumer</i>
    to the UI. Most of the functionalities of this library currently revolves around
    the model handler concept. A <i>ModelHandler</i> class helps create a two way bind between a class
    and UI components. The model handler can also be bound to UI components in order to display errors.
    It can basically send data from the UI components as an object, read an <i>ApiConsumedResponse</i>
    object and print the errors (if any) on the UI.
    <a href="https://github.com/neville-nazerane/NetCore-Apis/tree/master/MobileUI" target="_blank">This project</a>
    demonstrates using <i>NetCore.Apis.Client.UI</i> with raw in a xamarin forms project. The methods shown in this
    project can be used in any c# project. Any UI component can be configured to bind with any data type.
    Although, if the project is specifically xamarin forms, the <i>NetCore.Apis.XamarinForms</i> might be more
    suitable, since it comes with pre set binders for the common data types and components.
</p>

<p>
    The <i>ModelHandler</i> class takes the current model class to be handled as a generic type.
    Creating a new <i>ModelHander</i> for let's say, a class named "Employee" would be as follows:
</p>

<pre><code class="c#">var mapper = new ModelHandler&lt;Employee>();</code></pre>

<p>
    Here, mapper is a model handler that for employees. It can be configured to map/bind each
    property of <i>Employee</i> class with a component (like an input field). Each property can also be 
    bound to a component (such as a label) for displaying error messages.
</p>