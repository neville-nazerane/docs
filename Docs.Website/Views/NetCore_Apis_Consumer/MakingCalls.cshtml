
<p>
    This <code>ApiConsumer</code> class provides direct contains get, post, put
    and delete functions that can directly pass object in the common json format and fetch objects
    serialized into a specified type.
    <a href="https://github.com/neville-nazerane/NetCore-Apis/blob/master/NetCore.Apis.Consumer.Test/EmployeeTest.cs" target="_blank">This test class</a>
    shows the various ways get, post, put and delete functions can be used.
</p>

<p>
    When it comes to responses, these functions aim at returning objects of type <code>ApiConsumedResponse</code> (if the API returns a string) or
    <code>ApiConsumedResponse&lt;TModel></code> (where <code>TModel</code> is the type API returns IF successful). More about
    this class in the next tab. The http calling functions mainly takes into account the common usage. That is: used within a function
    that would return the response. Such a function would be in such a format:
</p>

<csharp>
    // not the actual code. Just a demo format
    public async Task&lt;ApiConsumedResponse&lt;TModel>> SampleGetFunc()
    => await consumer.DemoGetFunction&lt;TModel>("api/values");
</csharp>

<p>
    The above requires you to enter the <code>TModel</code> twice, while it doesn't provide any added safety. In order to
    avoid this repetition the <code>ApiConsumer</code> provide a functions that return the type <code>ApiConsumedResponseProvider</code>.
    This class can implicitly convert to any specified <code>ApiConsumedResponse&lt;TModel>></code> or <code>ApiConsumedResponse</code>.
    This means, the above code can simply be written as follows:
</p>

<csharp>
    // not the actual code. Just a demo format
    public async Task&lt;ApiConsumedResponse&lt;TModel>> SampleGetFunc()
        => await Consumer.GetAsync("api/values");
</csharp>

<p>
    Or as follows if the API call returns a string:
</p>

<csharp>
    // not the actual code. Just a demo format
    public async Task&lt;ApiConsumedResponse> SampleGetFunc()
    => await Consumer.GetAsync("api/values");
</csharp>

<p>
    The above code not only simplify the code by a great deal when looking at the bigger picture, but also simplifies the 
    updating the code when the API's return type changes.
</p>

