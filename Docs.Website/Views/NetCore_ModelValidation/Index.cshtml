
<p>
    This library provides helper functions that would help access the error messages that were recorded
    using <doc link="NetCore.ModelValidation.Core" /> in your .NET Core web app. You can use the 
    <code>UpdateValidations</code> function to update all validations to the <code>ModelState</code>
    when inside a controller. Since this is a controller's extension function, it needs to be accessed
    using the <code>this</code> keyword.
</p>

<csharp>
this.UpdateValidations(); // only updates errors to modelstate
this.UpdateValidations(myModel); // runs the TryValidateModel first and then updates errors
this.UpdateValidations(myModel, true); // only updates errors mapped to the provided model
</csharp>

<p>
    As seen above, the first function would simply add all errors from the model validator into the <code>ModelState</code>
    The second line runs the <code>TryValidateModel</code> function within the controller before the errors are
    added from the model validator. The <code>TryValidateModel</code> function present in the controller
    that would update the <code>ModelState</code> with all your default validations. The third function has the third parameter 
    set to true. This ensures that only the errors mapped to a model is updated. Read more about mapping errors to models
    in <a href="~/NetCore.ModelValidation.Core/MapModel">this documentation</a>.
</p>

<p>
    Quite often, after you have run an update on model validations, you might return a <code>View(myModel)</code> 
    or bad request for web apis. In these instances, instead of having the <code>UpdateValidations</code>
    followed by <code>View(myModel)</code> or <code>BadRequest()</code>, the following functions can directly be used.
</p>

<csharp>
return this.ValidateAndView(myModel); // runs UpdateValidations followed by view
return this.ValidateAndBadRequest(myModel); // runs UpdateValidations followed by bad request
</csharp>

<p>
    The above codes can also be used by all the <code>UpdateValidations</code> overloads shown above. 
</p>