
<p>
    The <code>ApiConsumedResponse</code> class is a wrapper around <code>HttpResponseMessage</code>. An object of this class can be 
    created either from a <code>ApiConsumer</code> of by implicitly converting a <code>HttpResponseMessage</code>. This class contains easier 
    (as compared to HttpResponseMessage) to access properties to check the response of the HTTP response. If the HTTP
    request failed with a 400 (bad request), the HTTP response body is automatically attempted to be serialized and stores
    as a dictonary. This serialization assumes the default .NET core response
    <i>return BadRequest(ModelState);</i> is used on the server side.
</p>

<p>The following is an example of how a result can be checked: </p>

<pre><code class="c#">ApiConsumedResponse res = await consumer.PostAsync("api/path", objectToPass);
    if (res.IsSuccessful) 
        Console.WriteLine("Done with response " + res.TextResponse);
    else if (res.IsBadRequest)
        Dictionary&lt;string, string[]> errors = res.Errors;
    else 
        Console.WriteLine("Got error message " + res.StatusCode)
</code></pre>

<p>
    There is also a generic <i>ApiConsumedResponse</i> class which can directly serialize the response into the specified type.
</p>

<pre><code class="c#">ApiConsumedResponse&lt;Employee> res = await consumer.GetAsync&lt;Employee>("api/path");
    if (res.IsSuccessful)
        Employee emp = res; // implicit operator
</code></pre>