
<p>
    Errors can be mapped to fields. This is basically a key (meant to be a field name) mapped to a collection 
    of values (meant to be errors). 
</p>

<p>
    The simpliest way of adding an error mapped to a key is by using the <code>AddError</code> function:
</p>

<csharp>
validator.AddError("name", "This field is duplicate");
validator.AddError("name", "Must start with upper case");
validator.AddError("age", "You seem too young");
</csharp>

<P>
    The above code adds two errors under the key "name" and one "age". All errors with key value pairs
    can be fetched with the <code>GetErrors</code> functions. You can also use the simplified
    syntax <code>validator[]</code> to fetch errors of a key.
</P>

<csharp>
IEnumerable&lt;KeyValuePair&lt;string, IEnumerable&lt;string>>> allErrors = validator.GetErrors();
IEnumerable&lt;string> errorsOfName = validator.GetErrors("name"); // all errors mapped to name
IEnumerable&lt;string> errorsOfAge = validator["age"]; // simplified GetErrors("age");
</csharp>


<p>
    It is often prefered to not enter the field names as raw strings for safety. To ensure you always enter the right
    field name of the right class you can use <code>nameof(MyModel.Name)</code>. However, this would require you to
    enter <code>nameof(MyModel</code> each time. To help with this, the model validator object can generate helper 
    objects mapped to a specific class. A helper simiplfies the process of requesting refering to field names with
    the help of lamda.
</p>

<csharp>
var helper = validator.GetHelper&lt;MyModel>(); // creates a helper for MyModel class
helper.AddError(m => m.Name, "This field is duplicate");
helper.AddError(m => m.Name, "Must start with upper case");
helper.AddError(m => m.Age, "You seem too young");
</csharp>