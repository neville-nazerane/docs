
<MainSection Title="Setup" Id="setup" Icon="fa-cogs">

    <Description>
        <p>
            This library provides an easy way to access and control JWT authentication. It allows you to have a single configuration
            for your tokens in your startup, and generate tokens via dependency injection in your code.
        </p>
    </Description>

    <Content>

        <SubSection Id="startup" Heading="Add to startup">
            <p>
                This service can be added as an authentication using the <code>AddNetCoreJwt()</code> function:
            </p>

            <CSharp>services.AddAuthentication().AddNetCoreJwt();</CSharp>

            <p>
                This adds an authentication for JWT authentication with preset values such as an autogenerated secret. This
                authentication is created under a scheme name that can be accessed from the constant <code>NetCoreJwtDefaults.SchemeName</code>.
                To set this authentication as default use the following:
            </p>

            <CSharp>services.AddAuthentication(NetCoreJwtDefaults.SchemeName).AddNetCoreJwt();</CSharp>

        </SubSection>


        <SubSection Id="config" Heading="Additional Configurations">
            <p>
                Additional configuration can be added by adding the required options:
            </p>

            <CSharp>
                services.AddAuthentication(NetCoreJwtDefaults.SchemeName).AddNetCoreJwt(o => {
                o.Audience = "";
                o.Issuer = "";
                o.Secret = "customSecret";
                });
            </CSharp>
        </SubSection>

    </Content>

</MainSection>