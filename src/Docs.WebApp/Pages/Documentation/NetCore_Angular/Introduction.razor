
<MainSection Title="Introduction" Id="intro">


    <Description>
        <p>
            The <i>NetCore.Angular</i> package allows handle angularjs within your .net core website in strongly
            typed ways.
        </p>
    </Description>

    <Content>
        <ol>
            <li>
                You can access the js file from the
                <a href="https://github.com/neville-nazerane/netcore-angular-bower.git" target="_blank">git repo</a>.
                Ensure this file is included in the <i>_Layout.cshtml</i> or the required files
            </li>
            <li>
                Add the angular module <i>'netcore-angular'</i>. This can be done in the module
                <i> angular.module()</i> declaration which is usually within the app.js file. Here is a
                <a href="https://github.com/neville-nazerane/netcore.angular/blob/master/Website/wwwroot/js/app.js" target="_blank">sample implementation</a>
            </li>
            <li>
                In your <i>Startup.cs</i>, add the services required with the following code:

                <pre><code>services.AddNetCoreAngular();</code></pre>

            </li>
            <li>
                In your <i>Views/_ViewImports.cshtml</i>, add the tag helpers using the following:
                <pre><code>@@addTagHelper *, NetCore.Angular</code></pre>
                <p>
                    Once this line is added, ensure that intellisense works within razor files. Common HTML elements
                    such as div, p and input should give intellisense when you start typing "ang". If this doesn't work,
                    rebuild the project, verify the above steps and reopen the razor file.
                </p>
            </li>
            <li>
                Make sure the scripts code is present for every page. It can be added to the layout file or elsewhere based on the
                required design.
                <pre><code> &lt;script-angular>&lt;/script-angular></code></pre>

                <p>
                    Intellisense would help with the code above. This code generates any generic javascript code required based
                    on the tag helpers used in the current view.
                </p>
            </li>
        </ol>
    </Content>


</MainSection>