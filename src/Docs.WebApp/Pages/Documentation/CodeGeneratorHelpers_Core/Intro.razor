
<MainSection Heading="Introduction" Id="intro" Icon="fa-info">


    <Description>

        <p>
            The nuget package <NugetLink Name="CodeGeneratorHelpers.Core" /> provides helper functions to aid with code generation using a console app.
            These functions primary provide the following functionalities:
        </p>

    </Description>

    <Content>

        <SubSection Id="features" Heading="Features">

            <p>

                <ul>

                    <li>
                        <strong>Finding project location:</strong>
                        Getting the target project's path relative to the executing console app can be tricky, as the execution path varies based on how we execute the console app.
                        Hence, this library simplifies accessing the target project's location.
                    </li>

                    <li>
                        <strong>Reading C# Code:</strong>
                        You can fetch detailed information on the code in each C# file.
                        This includes all classes, interfaces, properties, fields, and other elements within each file.
                    </li>

                    <li>
                        <strong>Parallel Processing:</strong>
                        This library provides multiple ways to read and write files in parallel, making the process time-efficient.
                    </li>

                </ul>

            </p>

        </SubSection>

        <SubSection Id="vsSourceGen" Heading="Source Generator Comparison">

@*             <p>
                <a href="https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview" target="_blank">.NET source generators</a> 
                is a powerful tool that is natively supported by .NET. It has been used to create several great libraries such as 
                <a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/maui">MAUI Community Toolkit</a>.
                While source generators can be an efficient solution for such libraries, they might not always be ideal for personal projects.
            </p> *@

            <h3>Advantages of .NET source generators over CodeGeneratorHelpers</h3>

            <ul>

                <li>
                    <strong>Better performance</strong>
                    Since source generators run natively within .NET's build, they leverage features like incremental builds to 
                    ensure optimized performance. The generation logic is only triggered on changed files, rather than the entire
                    codebase, which is particularly beneficial for larger projects.
                </li>

                <li>
                    <strong>Less setup process (once completed)</strong>
                    Once completed, source generators could offer a smoother and more streamlined execution process because they are built into the .NET build system. 
                    They run automatically as developers write code, instantly generating the necessary methods and properties.
                </li>


            </ul>

            <h3>Why use CodeGeneratorHelpers over .NET source generators?</h3>
            <ul>
                <li>
                    <strong>Stable workflow:</strong>
                    Source generators often have hurdles, such as requiring Visual Studio restarts during development. 
                    This can be a hindrance for personal projects as it disrupts the workflow
                </li>
                <li>
                    <strong>Using latest .NET:</strong>
                    Source generators need to run from a NetStandard 2.0 project. 
                    On the other hand, the console apps that use CodeGeneratorHelpers are built on .NET 8 since they don't have to directly reference the target project
                    This allows your code generators to leverage the latest C# features.
                </li>
            </ul>

        </SubSection>

    </Content>


</MainSection>

