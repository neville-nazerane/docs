
<MainSection Heading="Introduction" Id="intro" Icon="fa-info">


    <Description>

        <p>
            The nuget package <NugetLink Name="CodeGeneratorHelpers.Core" /> provides helper functions to aid with code generation using a console app.
            These functions primary provide the following functionalities:
        </p>

    </Description>

    <Content>

        <SubSection Id="features" Heading="Features">

            <p>

                <ul>

                    <li>
                        <strong>Finding project location:</strong>
                        Getting the target project's path relative to the executing console app can be tricky, as the execution path varies based on how we execute the console app.
                        Hence, this library simplifies accessing the target project's location.
                    </li>

                    <li>
                        <strong>Reading C# Code:</strong>
                        You can fetch detailed information on the code in each C# file.
                        This includes all classes, interfaces, properties, fields, and other elements within each file.
                    </li>

                    <li>
                        <strong>Parallel Processing:</strong>
                        This library provides multiple ways to read and write files in parallel, making the process time-efficient.
                    </li>

                </ul>

            </p>

        </SubSection>

        <SubSection Id="vsSourceGen" Heading="Source Generator Comparison">

@*             <p>
                <a href="https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview" target="_blank">.NET source generators</a> 
                is a powerful tool that is natively supported by .NET. It has been used to create several great libraries such as 
                <a href="https://learn.microsoft.com/en-us/dotnet/communitytoolkit/maui">MAUI Community Toolkit</a>.
                While source generators can be an efficient solution for such libraries, they might not always be ideal for personal projects.
            </p> *@

            <h3>Advantages of .NET source generators over CodeGeneratorHelpers</h3>

            <ul>

                <li>
                    <strong>Better performance</strong>
                    Since source generators run natively within .NET's build, they leverage features like incremental builds to 
                    ensure optimized performance. The generation logic is only triggered on changed files, rather than the entire
                    codebase, which is particularly beneficial for larger projects.
                </li>

                <li>
                    <strong>Less setup process (once developed)</strong>
                    Once completed, source generators could offer a smoother and more streamlined execution process because they are built into the .NET build system. 
                    They run automatically as developers write code, instantly generating the necessary methods and properties.
                </li>


            </ul>

            <h3>Advantages of CodeGeneratorHelpers over .NET source generators </h3>
            <ul>
                <li>
                    <strong>Smoother Development Experience</strong>
                    <p>
                        CodeGeneratorHelpers would provide a more stable development experience.
                        Source generators can be flaky during the development process,
                        as have been known to have issues such as not immediately responding to changes made on the generator code.
                        These issues often require a Visual Studio restart.
                    </p> 
                    <p>
                        Since CodeGeneratorHelpers is used within a console app,
                        it follows a familiar and predictable development workflow, providing smoother development overall.
                    </p>
                </li>

                <li>
                    <strong>Using the latest .NET</strong>
                    <p>
                        Since source generators are meant to referenced on the target project, source generators
                        projects need to run as a .NET Standard 2.0 project.
                        Since CodeGeneratorHelpers run in an isolated console app, they don't have such limitations. 
                        CodeGeneratorHelpers nuget is hence created on .NET 8. 
                        This allows developers to leverage the latest .NET features which can result in optimized features 
                        and cleaner syntax.
                    </p>

                </li>
            </ul>

        </SubSection>

    </Content>


</MainSection>

