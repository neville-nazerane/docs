
<MainSection Id="gettingStarted" Title="Getting Started">

    <Description>

        <p>
            To setup CodeGeneratorHelpers, you would need to create a console app that uses the CodeGeneratorHelpers.Core nuget.
            In this console app, you can then provide the path(s) of the project(s) you want to generate code in.
        </p>

    </Description>


    <Content>

        <SubSection Id="projectSetup" Heading="Project Setup">


            <p>
                Let's say you have the target project named <b>MyProject</b> and would like to create a console app named <b>MyCodeGeneration</b> for code generation.
                You can use the following CLI commands to setup the new console app:
            </p>

            <CodeBlock>
dotnet new console -o MyCodeGeneration
cd MyCodeGeneration
dotnet add package CodeGeneratorHelpers.Core
            </CodeBlock>

            <p>
                If you want the code generation to run automatically when <b>MyProject</b> compiles, you can include the following code
                in MyProject.csproj
            </p>

            <CodeBlock CodeClass="xml">
&lt;Target Name=&quot;RunCodeGenerator&quot; BeforeTargets=&quot;CoreCompile&quot;&gt;
&lt;Exec Command=&quot;dotnet run --project ../MyCodeGeneration&quot; /&gt;
&lt;/Target&gt;
            </CodeBlock>


        </SubSection>

        <SubSection Id="newGenerator" Heading="Creating a Generator">

            <p>
                In the <b>MyCodeGeneration</b> console app, you can now include the following code in Program.cs to create a generator.
            </p>

            <CSharp>
var generator = CodeGenerator.Create("MyProject",
                                        clearGenerationDestinationPath: true,
                                        generationDestinationPath: "Generated");
            </CSharp>

            <p>
                The <code>CodeGenerator.Create</code> function creates a new instance of <code>CodeGenerator</code> that is associated with a project/root folder.
            </p>

            <h3>Specifying the project path</h3>
            As mentioned earlier, based on how console app executes, its current directory path can vary. When the <code>targetAppPath</code> is provided, 
            the library iterates through he parent directories of the console app until it finds <code>targetAppPath</code> being a valid relative path.
            Here are some details on what you would need to set the project path to:

            <ul>


                <li>
                    <strong>If your target project and generation console app is in the same directory,</strong> you can simply use the name of your project.
                </li>

                <li>
                    <strong>If your target project and generation console app are in different directories,</strong> for instance: src/Code/MyProject and src/Utils/MyGenerator,
                    Your <code>targetAppPath</code> can be Code/MyProject. Since both are inside the root folder "src", you can mention the path relative to the "src" directory. 
                </li>

                <li>
                    <strong>In all cases,</strong> using the absolute path is always valid. 
                    However, for portability you might not want use this option.
                </li>

            </ul>

        </SubSection>

        <SubSection Id="generatorBasics" Heading="CodeGenerator Basics">

            Once you have a CodeGenerator object, you would have access to the following properties. 
            However, since the read and write functions internally use them, in most cases you might not need these.

            <ul>

                <li>
                    <strong>FullAppTargetPath</strong>
                    The absolute path to your target C# folder. This is derived based on the provided <code>targetAppPath</code>
                </li>

                <li>
                    <strong>FullGenerationDestinationPath</strong>
                    The full generation path. This is a combination of the <code>FullAppTargetPath</code> and <code>generationDestinationPath</code>
                </li>

            </ul>

            <h3>Basic functions</h3>

            <p>
                Below are some simple functions for basic functionalities. These functions infer you want aim to read and right inside the 
                <code>FullAppTargetPath</code>. Hence, <code>filePath</code> is meant to be the path inside the <code>FullAppTargetPath</code>.
            </p>

            <ul>

                <li>
                    <code>ReadTextInFileAsync(string filePath)</code>
                    Reads all text in the specific path and returns a raw string.
                    If you would like to reach C# code, you can use one of the function in the following section instead.
                </li>

                <li>
                    <code>WriteAllTextToFileAsync(string filePath, string rawText)</code>
                    You'll never guess what this one does.
                </li>

            </ul>

        </SubSection>


@*         <CSharp>
var generator = CodeGenerator.Create("CodeGeneratorHelpers.Core")
await generator.ExecuteOnEachFileAsync(execution: meta
    => generator.WriteAllTextToFileAsync($"{meta.SourceFilePath}.txt", $"Found {meta.Classes?.Count() ?? 0} classes"));
        </CSharp> *@



    </Content>


</MainSection>