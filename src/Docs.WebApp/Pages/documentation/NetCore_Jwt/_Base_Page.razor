@page "/documentation/NetCore_Jwt/"

<MainSection Title="Setup" Id="setup" Icon="fa-cogs" MenuText="Setup">

    <Description>
        <p>
            This library provides an easy way to access and control JWT authentication. It allows you to have a single configuration
            for your tokens in your startup, and generate tokens via dependency injection in your code.
        </p>
    </Description>

    <Content>



        <p>
            This service can be added as an authentication using the <code>AddNetCoreJwt()</code> function:
        </p>

        <csharp>
            services.AddAuthentication().AddNetCoreJwt();
        </csharp>

        <p>
            This adds an authentication for JWT authentication with preset values such as an autogenerated secret. This
            authentication is created under a scheme name that can be accessed from the constant <code>NetCoreJwtDefaults.SchemeName</code>.
            To set this authentication as default use the following:
        </p>

        <csharp>
            services.AddAuthentication(NetCoreJwtDefaults.SchemeName).AddNetCoreJwt();
        </csharp>

        <p>
            Additional configuration can be added by adding the required options:
        </p>

        <CSharp>
    services.AddAuthentication(NetCoreJwtDefaults.SchemeName).AddNetCoreJwt(o => {
        o.Audience = "";
        o.Issuer = "";
        o.Secret = "customSecret";
    });
        </CSharp>
    </Content>

</MainSection>

<MainSection Title="Fetching Tokens" MenuText="Fetching Tokens" Id="tokens" Icon="fa-barcode">

    <Description>
        A token can be generated within any service by injecting <code>IBearerManager</code>. With this service, you can
        generate a new token with just the username (and/or roles), by passing in the claims or by passing the whole
        claims identity.
    </Description>

    <Content>
        <CSharp>
    bearerManager.Generate("myUserName");
    bearerManager.Generate("myUserName", new string[]{ "admin" });
    bearerManager.Generate(new Claim[]{  });
    bearerManager.Generate(myClaimIdentity);
        </CSharp>

        <p>
            All above overloads also work as an extension function <code>GenerateBearerToken</code> for the <code>HttpContext</code>.
        </p>
    </Content>
</MainSection>